name: Build and Push Image to ECR

on:
  pull_request:
    branches:
      - dev
      - main
    types:
      - opened
  workflow_dispatch:
    inputs:
      region:
        description: 'Target region'
        required: true
        default: 'us-east-1'
        type: choice
        options:
          - us-east-1
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ACCOUNT_ID: ${{ github.event.inputs.environment == 'dev' && secrets.AWS_ACCOUNT_ID_DEV || github.event.inputs.environment == 'staging' && secrets.AWS_ACCOUNT_ID_STAGING  || secrets.AWS_ACCOUNT_ID_PROD }}
  AWS_REGION: ${{ github.event.inputs.region }}
  AWS_DOMAIN: artifacts
  AWS_REPO: Artifacts
  IMAGE: postgresql-server
  VERSION: latest
  POSTGRES_DB: trading
  POSTGRES_HOST_AUTH_METHOD: trust

jobs:
  validate-environment:
    name: Validate Environment
    runs-on: ${{ vars.RUNNER }}
    if: >
      (github.ref_name == 'dev' && github.event.inputs.environment == 'dev') ||
      (github.ref_name == 'main' && (github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'production'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      
      - name: Validating Environment
        run: echo "Validating ${{ env.ENVIRONMENT }} environment from ${{ github.ref_name }} branch"

  ci:
    name: ci
    needs: validate-environment
    runs-on: ${{ vars.RUNNER }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Lint code
        run: echo "lint"

      - name: Test code
        run: echo "test"

      - name: Get AWS AUTH TOKEN
        run: |
          echo "POETRY_HTTP_BASIC_ARTIFACTS_USERNAME=aws" >> $GITHUB_ENV
          echo "POETRY_HTTP_BASIC_ARTIFACTS_PASSWORD=$(aws codeartifact get-authorization-token \
            --domain ${{ env.AWS_DOMAIN }} \
            --domain-owner ${{ env.AWS_ACCOUNT_ID }} \
            --region ${{ env.AWS_REGION }} \
            --query 'authorizationToken' \
            --output text)" >> $GITHUB_ENV
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build \
            --build-arg POSTGRES_DB=${{ env.POSTGRES_DB }} \
            --build-arg POSTGRES_HOST_AUTH_METHOD=${{ env.POSTGRES_HOST_AUTH_METHOD }} \
            -t ${{ env.IMAGE }} .
      
      - name: List Images
        run: |
          docker images
      
      - name: Save Docker image as artifact
        run: |
          docker save ${{ env.IMAGE }}:${{ env.VERSION }} -o ${{ env.IMAGE }}.tar
  
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE }}
          path: ${{ env.IMAGE }}.tar

  cd:
    needs: ci
    name: cd
    runs-on: ${{ vars.RUNNER }}
    
    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.IMAGE }}
          path: .

      - name: Load Docker image from artifact
        run: |
          docker load -i ${{ env.IMAGE }}.tar

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: List Images
        run: |
          docker images
      
      - name: Tag Docker Image
        run: |
          docker tag ${{ env.IMAGE }}:${{ env.VERSION }} ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE }}:${{ env.VERSION }}
      
      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE }}:${{ env.VERSION }}